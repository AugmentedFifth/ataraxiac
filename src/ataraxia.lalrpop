use ast::*;

grammar;


pub Prog: Prog = {
    Decl* => Prog::new(<>),
};

pub Decl: Decl = {
    <Id> ":" <Type> ":=" <Expr> => Decl::new(<>),
};

pub Typing: Typing = {
    TypeId => Typing::Concrete(<>),

    <v:(<Typing> "->")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};



TypeId: String = {
    r"[A-Z][a-zA-Z0-9_'\-]*" => <>,
};

Id: String = {
    r"[a-zA-Z_~`!@#$%^&*+=|:;'<>,.?/\-][a-zA-Z0-9_~`!@#$%^&*+=|:;'<>,.?/\-]*" => <>,
};


/*
pub Expr: i32 = {
    <l:Expr> "+" <r:Factor> => l + r,
    <l:Expr> "-" <r:Factor> => l - r,
    Factor,
};

Factor: i32 = {
    <l:Factor> "*" <r:Term> => l * r,
    <l:Factor> "/" <r:Term> => l / r,
    Term,
};

Term: i32 = {
    Num,
    "(" <Expr> ")",
};

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap(),
};
*/
